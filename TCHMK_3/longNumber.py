# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_longNumber', [dirname(__file__)])
        except ImportError:
            import _longNumber
            return _longNumber
        if fp is not None:
            try:
                _mod = imp.load_module('_longNumber', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _longNumber = swig_import_helper()
    del swig_import_helper
else:
    import _longNumber
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class longNumber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, longNumber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, longNumber, name)
    def __init__(self, *args): 
        this = _longNumber.new_longNumber(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _longNumber.delete_longNumber
    __del__ = lambda self : None;
    def VivodStroki(self): return _longNumber.longNumber_VivodStroki(self)
    def __repr__(self): return _longNumber.longNumber___repr__(self)
    def __str__(self): return _longNumber.longNumber___str__(self)
    def ReadFile(self, *args): return _longNumber.longNumber_ReadFile(self, *args)
    def SaveFile(self, *args): return _longNumber.longNumber_SaveFile(self, *args)
    def ReadBinFile(self, *args): return _longNumber.longNumber_ReadBinFile(self, *args)
    def SaveBinFile(self, *args): return _longNumber.longNumber_SaveBinFile(self, *args)
    def __neg__(self): return _longNumber.longNumber___neg__(self)
    def __xor__(self, *args): return _longNumber.longNumber___xor__(self, *args)
    def __add__(self, *args): return _longNumber.longNumber___add__(self, *args)
    def __sub__(self, *args): return _longNumber.longNumber___sub__(self, *args)
    def __mul__(self, *args): return _longNumber.longNumber___mul__(self, *args)
    def __div__(self, *args): return _longNumber.longNumber___div__(self, *args)
    def __mod__(self, *args): return _longNumber.longNumber___mod__(self, *args)
    def __gt__(self, *args): return _longNumber.longNumber___gt__(self, *args)
    def __ge__(self, *args): return _longNumber.longNumber___ge__(self, *args)
    def __lt__(self, *args): return _longNumber.longNumber___lt__(self, *args)
    def __le__(self, *args): return _longNumber.longNumber___le__(self, *args)
    def __eq__(self, *args): return _longNumber.longNumber___eq__(self, *args)
    def __ne__(self, *args): return _longNumber.longNumber___ne__(self, *args)
longNumber_swigregister = _longNumber.longNumber_swigregister
longNumber_swigregister(longNumber)


def Stepen(*args):
  return _longNumber.Stepen(*args)
Stepen = _longNumber.Stepen
# This file is compatible with both classic and new-style classes.


